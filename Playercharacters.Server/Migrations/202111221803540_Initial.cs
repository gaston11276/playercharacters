// <auto-generated />
// ReSharper disable all

using System;
using System.Data.Entity.Migrations;
using System.CodeDom.Compiler;
using System.Data.Entity.Migrations.Infrastructure;

namespace Gaston11276.Playercharacters.Server.Migrations
{
    [GeneratedCode("NFive.Migration", "0.4 Build 236")]
    public class Initial : DbMigration, IMigrationMetadata
    {
        string IMigrationMetadata.Id => "202111221803540_Initial";
        
        string IMigrationMetadata.Source => null;
        
        string IMigrationMetadata.Target => "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";
        
        public override void Up()
        {
            CreateTable(
                "dbo.CharacterInventories",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        CharacterId = c.Guid(nullable: false),
                        ContainerId = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Characters", t => t.CharacterId, cascadeDelete: true)
                .ForeignKey("dbo.Containers", t => t.ContainerId, cascadeDelete: true)
                .Index(t => t.CharacterId)
                .Index(t => t.ContainerId);
            
            CreateTable(
                "dbo.Characters",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Forename = c.String(nullable: false, maxLength: 100, unicode: false),
                        Middlename = c.String(maxLength: 100, unicode: false),
                        Surname = c.String(nullable: false, maxLength: 100, unicode: false),
                        DateOfBirth = c.DateTime(nullable: false, precision: 0),
                        Gender = c.Short(nullable: false),
                        Alive = c.Boolean(nullable: false, storeType: "bit"),
                        Health = c.Int(nullable: false),
                        Armor = c.Int(nullable: false),
                        Ssn = c.Int(nullable: false),
                        Position_X = c.Single(nullable: false),
                        Position_Y = c.Single(nullable: false),
                        Position_Z = c.Single(nullable: false),
                        Model = c.String(nullable: false, maxLength: 200, unicode: false),
                        AnimationSet = c.String(nullable: false, maxLength: 200, unicode: false),
                        PedHeadBlendDataId = c.Guid(nullable: false),
                        PedFaceFeaturesId = c.Guid(nullable: false),
                        PedHeadOverlaysId = c.Guid(nullable: false),
                        PedDecorationsId = c.Guid(nullable: false),
                        PedComponentsId = c.Guid(nullable: false),
                        PedHairColor = c.Int(nullable: false),
                        PedSecondHairColor = c.Int(nullable: false),
                        PedEyeColor = c.Int(nullable: false),
                        PedPropsId = c.Guid(nullable: false),
                        LastPlayed = c.DateTime(precision: 0),
                        UserId = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.PedComponents", t => t.PedComponentsId, cascadeDelete: true)
                .ForeignKey("dbo.PedDecorations", t => t.PedDecorationsId, cascadeDelete: true)
                .ForeignKey("dbo.PedFaceFeatures", t => t.PedFaceFeaturesId, cascadeDelete: true)
                .ForeignKey("dbo.PedHeadBlendDatas", t => t.PedHeadBlendDataId, cascadeDelete: true)
                .ForeignKey("dbo.PedHeadOverlays", t => t.PedHeadOverlaysId, cascadeDelete: true)
                .ForeignKey("dbo.PedProps", t => t.PedPropsId, cascadeDelete: true)
                .ForeignKey("dbo.Users", t => t.UserId, cascadeDelete: true)
                .Index(t => t.PedHeadBlendDataId)
                .Index(t => t.PedFaceFeaturesId)
                .Index(t => t.PedHeadOverlaysId)
                .Index(t => t.PedDecorationsId)
                .Index(t => t.PedComponentsId)
                .Index(t => t.PedPropsId)
                .Index(t => t.UserId);
            
            CreateTable(
                "dbo.PedComponents",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Face_Type = c.Int(nullable: false),
                        Face_Index = c.Int(nullable: false),
                        Face_Texture = c.Int(nullable: false),
                        Mask_Type = c.Int(nullable: false),
                        Mask_Index = c.Int(nullable: false),
                        Mask_Texture = c.Int(nullable: false),
                        Hair_Type = c.Int(nullable: false),
                        Hair_Index = c.Int(nullable: false),
                        Hair_Texture = c.Int(nullable: false),
                        Torso_Type = c.Int(nullable: false),
                        Torso_Index = c.Int(nullable: false),
                        Torso_Texture = c.Int(nullable: false),
                        Legs_Type = c.Int(nullable: false),
                        Legs_Index = c.Int(nullable: false),
                        Legs_Texture = c.Int(nullable: false),
                        Back_Type = c.Int(nullable: false),
                        Back_Index = c.Int(nullable: false),
                        Back_Texture = c.Int(nullable: false),
                        Shoes_Type = c.Int(nullable: false),
                        Shoes_Index = c.Int(nullable: false),
                        Shoes_Texture = c.Int(nullable: false),
                        Accessory_Type = c.Int(nullable: false),
                        Accessory_Index = c.Int(nullable: false),
                        Accessory_Texture = c.Int(nullable: false),
                        Undershirt_Type = c.Int(nullable: false),
                        Undershirt_Index = c.Int(nullable: false),
                        Undershirt_Texture = c.Int(nullable: false),
                        Kevlar_Type = c.Int(nullable: false),
                        Kevlar_Index = c.Int(nullable: false),
                        Kevlar_Texture = c.Int(nullable: false),
                        Badge_Type = c.Int(nullable: false),
                        Badge_Index = c.Int(nullable: false),
                        Badge_Texture = c.Int(nullable: false),
                        Torso2_Type = c.Int(nullable: false),
                        Torso2_Index = c.Int(nullable: false),
                        Torso2_Texture = c.Int(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.PedDecorations",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        ChestTop_Type = c.Int(nullable: false),
                        ChestTop_Zone = c.Int(nullable: false),
                        ChestTop_Index = c.Int(nullable: false),
                        ChestTop_Collection = c.Int(nullable: false),
                        ChestTop_Overlay = c.Int(nullable: false),
                        ChestTopLeft_Type = c.Int(nullable: false),
                        ChestTopLeft_Zone = c.Int(nullable: false),
                        ChestTopLeft_Index = c.Int(nullable: false),
                        ChestTopLeft_Collection = c.Int(nullable: false),
                        ChestTopLeft_Overlay = c.Int(nullable: false),
                        ChestTopRight_Type = c.Int(nullable: false),
                        ChestTopRight_Zone = c.Int(nullable: false),
                        ChestTopRight_Index = c.Int(nullable: false),
                        ChestTopRight_Collection = c.Int(nullable: false),
                        ChestTopRight_Overlay = c.Int(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.PedFaceFeatures",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        NoseWidth = c.Single(nullable: false),
                        NosePeakHeight = c.Single(nullable: false),
                        NosePeakLength = c.Single(nullable: false),
                        NoseBoneHeight = c.Single(nullable: false),
                        NosePeakLowering = c.Single(nullable: false),
                        NoseBoneTwist = c.Single(nullable: false),
                        EyeBrowHeight = c.Single(nullable: false),
                        EyeBrowForward = c.Single(nullable: false),
                        CheekBoneHeight = c.Single(nullable: false),
                        CheekBoneWidth = c.Single(nullable: false),
                        CheekWidth = c.Single(nullable: false),
                        EyesOpening = c.Single(nullable: false),
                        LipThickness = c.Single(nullable: false),
                        JawBoneWidth = c.Single(nullable: false),
                        JawBoneLength = c.Single(nullable: false),
                        ChinBoneLowering = c.Single(nullable: false),
                        ChinBoneLength = c.Single(nullable: false),
                        ChinBoneWidth = c.Single(nullable: false),
                        ChinDimple = c.Single(nullable: false),
                        NeckThickness = c.Single(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.PedHeadBlendDatas",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Parent1 = c.Int(nullable: false),
                        Parent2 = c.Int(nullable: false),
                        ShapeMix = c.Single(nullable: false),
                        SkinMix = c.Single(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.PedHeadOverlays",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Blemishes_Type = c.Int(nullable: false),
                        Blemishes_Index = c.Int(nullable: false),
                        Blemishes_Opacity = c.Single(nullable: false),
                        Blemishes_ColorType = c.Int(nullable: false),
                        Blemishes_ColorId = c.Int(nullable: false),
                        Blemishes_SecondColorId = c.Int(nullable: false),
                        FacialHair_Type = c.Int(nullable: false),
                        FacialHair_Index = c.Int(nullable: false),
                        FacialHair_Opacity = c.Single(nullable: false),
                        FacialHair_ColorType = c.Int(nullable: false),
                        FacialHair_ColorId = c.Int(nullable: false),
                        FacialHair_SecondColorId = c.Int(nullable: false),
                        Eyebrows_Type = c.Int(nullable: false),
                        Eyebrows_Index = c.Int(nullable: false),
                        Eyebrows_Opacity = c.Single(nullable: false),
                        Eyebrows_ColorType = c.Int(nullable: false),
                        Eyebrows_ColorId = c.Int(nullable: false),
                        Eyebrows_SecondColorId = c.Int(nullable: false),
                        Ageing_Type = c.Int(nullable: false),
                        Ageing_Index = c.Int(nullable: false),
                        Ageing_Opacity = c.Single(nullable: false),
                        Ageing_ColorType = c.Int(nullable: false),
                        Ageing_ColorId = c.Int(nullable: false),
                        Ageing_SecondColorId = c.Int(nullable: false),
                        Makeup_Type = c.Int(nullable: false),
                        Makeup_Index = c.Int(nullable: false),
                        Makeup_Opacity = c.Single(nullable: false),
                        Makeup_ColorType = c.Int(nullable: false),
                        Makeup_ColorId = c.Int(nullable: false),
                        Makeup_SecondColorId = c.Int(nullable: false),
                        Blush_Type = c.Int(nullable: false),
                        Blush_Index = c.Int(nullable: false),
                        Blush_Opacity = c.Single(nullable: false),
                        Blush_ColorType = c.Int(nullable: false),
                        Blush_ColorId = c.Int(nullable: false),
                        Blush_SecondColorId = c.Int(nullable: false),
                        Complexion_Type = c.Int(nullable: false),
                        Complexion_Index = c.Int(nullable: false),
                        Complexion_Opacity = c.Single(nullable: false),
                        Complexion_ColorType = c.Int(nullable: false),
                        Complexion_ColorId = c.Int(nullable: false),
                        Complexion_SecondColorId = c.Int(nullable: false),
                        SunDamage_Type = c.Int(nullable: false),
                        SunDamage_Index = c.Int(nullable: false),
                        SunDamage_Opacity = c.Single(nullable: false),
                        SunDamage_ColorType = c.Int(nullable: false),
                        SunDamage_ColorId = c.Int(nullable: false),
                        SunDamage_SecondColorId = c.Int(nullable: false),
                        Lipstick_Type = c.Int(nullable: false),
                        Lipstick_Index = c.Int(nullable: false),
                        Lipstick_Opacity = c.Single(nullable: false),
                        Lipstick_ColorType = c.Int(nullable: false),
                        Lipstick_ColorId = c.Int(nullable: false),
                        Lipstick_SecondColorId = c.Int(nullable: false),
                        MolesAndFreckles_Type = c.Int(nullable: false),
                        MolesAndFreckles_Index = c.Int(nullable: false),
                        MolesAndFreckles_Opacity = c.Single(nullable: false),
                        MolesAndFreckles_ColorType = c.Int(nullable: false),
                        MolesAndFreckles_ColorId = c.Int(nullable: false),
                        MolesAndFreckles_SecondColorId = c.Int(nullable: false),
                        ChestHair_Type = c.Int(nullable: false),
                        ChestHair_Index = c.Int(nullable: false),
                        ChestHair_Opacity = c.Single(nullable: false),
                        ChestHair_ColorType = c.Int(nullable: false),
                        ChestHair_ColorId = c.Int(nullable: false),
                        ChestHair_SecondColorId = c.Int(nullable: false),
                        BodyBlemishes_Type = c.Int(nullable: false),
                        BodyBlemishes_Index = c.Int(nullable: false),
                        BodyBlemishes_Opacity = c.Single(nullable: false),
                        BodyBlemishes_ColorType = c.Int(nullable: false),
                        BodyBlemishes_ColorId = c.Int(nullable: false),
                        BodyBlemishes_SecondColorId = c.Int(nullable: false),
                        AddBodyBlemishes = c.Int(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.PedProps",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Hat_Type = c.Int(nullable: false),
                        Hat_Index = c.Int(nullable: false),
                        Hat_Texture = c.Int(nullable: false),
                        Glasses_Type = c.Int(nullable: false),
                        Glasses_Index = c.Int(nullable: false),
                        Glasses_Texture = c.Int(nullable: false),
                        Ear_Type = c.Int(nullable: false),
                        Ear_Index = c.Int(nullable: false),
                        Ear_Texture = c.Int(nullable: false),
                        Watch_Type = c.Int(nullable: false),
                        Watch_Index = c.Int(nullable: false),
                        Watch_Texture = c.Int(nullable: false),
                        Bracelet_Type = c.Int(nullable: false),
                        Bracelet_Index = c.Int(nullable: false),
                        Bracelet_Texture = c.Int(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id);
            
          
            
            CreateTable(
                "dbo.Containers",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        ParentContainerId = c.Guid(),
                        Name = c.String(maxLength: 1000, unicode: false),
                        Width = c.Int(nullable: false),
                        Height = c.Int(nullable: false),
                        MaxWeight = c.Single(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Containers", t => t.ParentContainerId)
                .Index(t => t.ParentContainerId);
            
            CreateTable(
                "dbo.Items",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        ItemDefinitionId = c.Guid(nullable: false),
                        ContainerId = c.Guid(),
                        Weight = c.Single(nullable: false),
                        Width = c.Int(nullable: false),
                        Height = c.Int(nullable: false),
                        X = c.Int(),
                        Y = c.Int(),
                        Rotated = c.Boolean(nullable: false, storeType: "bit"),
                        UsesRemaining = c.Int(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Containers", t => t.ContainerId)
                .ForeignKey("dbo.ItemDefinitions", t => t.ItemDefinitionId, cascadeDelete: true)
                .Index(t => t.ItemDefinitionId)
                .Index(t => t.ContainerId);
            
            CreateTable(
                "dbo.ItemDefinitions",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Name = c.String(maxLength: 1000, unicode: false),
                        Description = c.String(maxLength: 1000, unicode: false),
                        Image = c.String(maxLength: 1000, unicode: false),
                        Model = c.String(maxLength: 1000, unicode: false),
                        Weight = c.Int(nullable: false),
                        Width = c.Int(nullable: false),
                        Height = c.Int(nullable: false),
                        TotalUses = c.Int(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.CharacterSessions",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Connected = c.DateTime(precision: 0),
                        Disconnected = c.DateTime(precision: 0),
                        CharacterId = c.Guid(nullable: false),
                        SessionId = c.Guid(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Characters", t => t.CharacterId, cascadeDelete: true)
                .ForeignKey("dbo.Sessions", t => t.SessionId, cascadeDelete: true)
                .Index(t => t.CharacterId)
                .Index(t => t.SessionId);
            
            CreateTable(
                "dbo.WorldItems",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        ItemId = c.Guid(nullable: false),
                        Position_X = c.Single(nullable: false),
                        Position_Y = c.Single(nullable: false),
                        Position_Z = c.Single(nullable: false),
                        Created = c.DateTime(nullable: false, precision: 0),
                        Deleted = c.DateTime(precision: 0),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Items", t => t.ItemId, cascadeDelete: true)
                .Index(t => t.ItemId);
            
        }
        
        public override void Down()
        {
            DropForeignKey("dbo.WorldItems", "ItemId", "dbo.Items");
            DropForeignKey("dbo.CharacterSessions", "SessionId", "dbo.Sessions");
            DropForeignKey("dbo.CharacterSessions", "CharacterId", "dbo.Characters");
            DropForeignKey("dbo.CharacterInventories", "ContainerId", "dbo.Containers");
            DropForeignKey("dbo.Containers", "ParentContainerId", "dbo.Containers");
            DropForeignKey("dbo.Items", "ItemDefinitionId", "dbo.ItemDefinitions");
            DropForeignKey("dbo.Items", "ContainerId", "dbo.Containers");
            DropForeignKey("dbo.CharacterInventories", "CharacterId", "dbo.Characters");
            DropForeignKey("dbo.Characters", "UserId", "dbo.Users");
            DropForeignKey("dbo.Sessions", "UserId", "dbo.Users");
            DropForeignKey("dbo.Characters", "PedPropsId", "dbo.PedProps");
            DropForeignKey("dbo.Characters", "PedHeadOverlaysId", "dbo.PedHeadOverlays");
            DropForeignKey("dbo.Characters", "PedHeadBlendDataId", "dbo.PedHeadBlendDatas");
            DropForeignKey("dbo.Characters", "PedFaceFeaturesId", "dbo.PedFaceFeatures");
            DropForeignKey("dbo.Characters", "PedDecorationsId", "dbo.PedDecorations");
            DropForeignKey("dbo.Characters", "PedComponentsId", "dbo.PedComponents");
            DropIndex("dbo.WorldItems", new[] { "ItemId" });
            DropIndex("dbo.CharacterSessions", new[] { "SessionId" });
            DropIndex("dbo.CharacterSessions", new[] { "CharacterId" });
            DropIndex("dbo.Items", new[] { "ContainerId" });
            DropIndex("dbo.Items", new[] { "ItemDefinitionId" });
            DropIndex("dbo.Containers", new[] { "ParentContainerId" });
            DropIndex("dbo.Sessions", new[] { "UserId" });
            DropIndex("dbo.Characters", new[] { "UserId" });
            DropIndex("dbo.Characters", new[] { "PedPropsId" });
            DropIndex("dbo.Characters", new[] { "PedComponentsId" });
            DropIndex("dbo.Characters", new[] { "PedDecorationsId" });
            DropIndex("dbo.Characters", new[] { "PedHeadOverlaysId" });
            DropIndex("dbo.Characters", new[] { "PedFaceFeaturesId" });
            DropIndex("dbo.Characters", new[] { "PedHeadBlendDataId" });
            DropIndex("dbo.CharacterInventories", new[] { "ContainerId" });
            DropIndex("dbo.CharacterInventories", new[] { "CharacterId" });
            DropTable("dbo.WorldItems");
            DropTable("dbo.CharacterSessions");
            DropTable("dbo.ItemDefinitions");
            DropTable("dbo.Items");
            DropTable("dbo.Containers");
            DropTable("dbo.Sessions");
            DropTable("dbo.Users");
            DropTable("dbo.PedProps");
            DropTable("dbo.PedHeadOverlays");
            DropTable("dbo.PedHeadBlendDatas");
            DropTable("dbo.PedFaceFeatures");
            DropTable("dbo.PedDecorations");
            DropTable("dbo.PedComponents");
            DropTable("dbo.Characters");
            DropTable("dbo.CharacterInventories");
        }
    }
}
